<!DOCTYPE html>
<html lang="en-GB">
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>AV Neue Theme middleware example</title>

  <style>
    html {
      width: 100%;
      height: 100%;
      font-family: consolas;
      font-size: 100%;
      background-color:#e5e5e5;
    }
    body {
      margin: 0;
      height: 100%;
    }
    video {
      margin: 0;
    }
  </style>

  <style>
    .terminate-btn {
      margin: 2em 1em;
    }

    .terminated .vjs-progress-control .vjs-play-progress {
      background: red;
    }
  </style>

  <!-- AV Neue theme -->
  <link href="../dist/video-js.css" rel="stylesheet" type="text/css">

  <!-- Video.js -->
  <script src="../dist/video.js"></script>

</head>
<body>

  <video id="videojsElement" class="video-js" lang="en" controls poster="//d2zihajmogu5jn.cloudfront.net/elephantsdream/poster.png">
    <source src="//d2zihajmogu5jn.cloudfront.net/elephantsdream/ed_hd.mp4" type="video/mp4">
    <source src="//d2zihajmogu5jn.cloudfront.net/elephantsdream/ed_hd.ogg" type="video/ogg">
  </video>

  <input id="stateToggle" type="checkbox" class="terminate-btn">
    Terminate the play/pause middleware
  </input>

  <script>
    var stateToggle = document.getElementById('stateToggle');

    // Middleware 1
    var m1 = function(player) {
      return {
        // Mediating play to the tech
        callPlay: function() {
          if (stateToggle.checked) {
            console.log('Middleware 1: Play is set to terminate');

            player.addClass('terminated');
            return videojs.middleware.TERMINATOR;

          } else {
            console.log('Middleware 1: Play has been called');
            player.removeClass('terminated');
          }
        },
        // Mediating the results back to the player
        play: function(cancelled, value) {
          console.log('Middleware 1: play got from tech. What is the value passed?', value);

          // Handle the promise if it is returned
          if(value && value.then) {
            value.then(() => {
              console.log('Middleware 1: Promise resolved.')
            })
            .catch((err) => {
              console.log('Middleware 1: Promise rejected.');
            });
          }

          if (cancelled) {
            console.log('Middleware 1: play has been cancelled prior to this middleware');
          }
        },
        // Mediating to tech
        callPause: function() {
          if (stateToggle.checked) {
            console.log('Middleware 1: Pause is set to terminate');

            player.addClass('terminated');
            return videojs.middleware.TERMINATOR;

          } else {
            console.log('Middleware 1: Pause has been called');
            player.removeClass('terminated');
          }
        },
        // Mediating the results back to the player
        pause: function(cancelled, value) {
          console.log('Middleware 1: pause got back from tech. What is the value passed?', value);

          if (cancelled) {
            console.log('Middleware 1: pause has been cancelled prior to this middleware');
          }

          return value;
        },
        // Required for middleware. Simply passes along the source
        setSource: function(srcObj, next) {
          next(null, srcObj);
        }
      };
    };

    // Middleware 2
    var m2 = function(player) {
      return {
        callPlay: function() {
          console.log('Middleware 2: play has been called');
        },
        play: function(cancelled, value) {
          console.log('Middleware 2: got play from tech. What is the value passed?', value);

          if (cancelled) {
            console.log('Middleware 2: play has been cancelled prior to this middleware');
          }

          return value;
        },
        callPause: function() {
          console.log('Middleware 2: pause has been called');
        },
        pause: function(cancelled, value) {
          console.log('Middleware 2: got pause from tech. What is the value passed?', value);

          if (cancelled) {
            console.log('Middleware 2: pause has been cancelled prior to this middleware');
          }

          return value;
        },
        setSource: function(srcObj, next) {
          next(null, srcObj);
        }
      };
    }

    videojs.use('*', m1);
    videojs.use('*', m2);

    // Initial set-up
    var player = videojs('videojsElement', {
      'autoplay': false,
      'controls': true,
      'loop': false,
      'muted': false,
      'preload': 'auto',
      'responsive': true,
      'fluid': true,          // (1) or...
//    'fill': true            // (2) or...
//    'aspectRatio': '16:9'   // (3)
      'breakpoints': {
        'tiny': 210,
        'x-small': 320,
        'small': 639,
        'medium': 768,
        'large': 1440,
        'x-large': 2560,
        'huge': Infinity
      },
      'html5': {
        'nativeTextTracks': false,
        'nativeControlsForTouch': false,
        'nativeAudioTracks': false,
        'nativeVideoTracks': false,
      },
      'inactivityTimeout': 1000,
      'controlBar': {
        'durationDisplay': true,
        'remainingTimeDisplay': false,
        'timeDivider': false,
      },
    },
    function() {
      // this.createModal('foo');
      // Callback.
    });

    console.log('Calling play...');
    player.setTimeout(() => {
      player.play()
        .then(() => {
          console.log('The promise resolved, we are playing.');
        },
        (err) => {
          console.log('The promise was rejected, we failed to play.');
        });
    }, 500);
  </script>

</body>
</html>
