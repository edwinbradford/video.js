<!DOCTYPE html>
<html lang="en-GB">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Video.js loadMedia Demo</title>

  <!-- Viewport style -->
  <style>
    html {
      width: 100%;
      height: 100%;
      font-family: consolas;
      font-size: 100%;
      background-color: #1a1a1a;
    }
    body {
      margin: 0;
      height: 100%;
    }
    video {
      margin: 0;
    }
  </style>

  <link href="../dist/video-js.css" rel="stylesheet" type="text/css">
  <script src="../dist/video.js"></script>

</head>
<body>
  <video-js
    id="videojsElement"
    poster="//d2zihajmogu5jn.cloudfront.net/elephantsdream/poster.png"
  >
    <source
      src="https://archive.org/download/ElephantsDream/ed_hd.mp4"
      type="video/mp4"
    >
    <source
      src="https://archive.org/download/ElephantsDream/ed_hd.ogv"
      type="video/ogv"
    >
    <p class="vjs-no-js">To view this video please enable JavaScript, and consider upgrading to a web browser that <a href="https://videojs.com/html5-video-support/" target="_blank">supports HTML5 video</a></p>
  </video-js>
  <script>

    /* Add a custom component to wrap control bar child flex items,
     * cf. player control bar children below
     */
    const Component = videojs.getComponent('Component');
    class neueWrap extends Component {
      constructor(player, options) {
        super(player, options);
        this.addClass('vjs-neue-wrap'); // Add any classes you want
      }
    }
    videojs.registerComponent('neueWrap', neueWrap);

    /* Pad time with leading zeros,
     * cf. player ready function below
     */
    function formatTimeWithLeadingZeros(seconds) {
      const minutes = Math.floor(seconds / 60);
      const remainingSeconds = Math.floor(seconds % 60);
      return `${minutes < 10 ? '0' : ''}${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;
    }

    const player = videojs('videojsElement', {
      autoplay: false,
      experimentalSvgIcons: true,
      controls: true,
      loop: false,
      muted: false,
      preload: 'auto',
      responsive: true,
      fluid: true,            // (1) or...
      // fill: true,          // (2) or...
      // aspectRatio: '16:9', // (3)
      // audioOnlyMode: true,
      spatialNavigation: {
        enabled: true,
        horizontalSeek: true
      },
      // Breakpoints require responsive: true
      breakpoints: {
        tiny: 210,
        xsmall: 320,
        small: 425,
        medium: 768,
        large: 1366,  // Default = 1440
        xlarge: 1920, // Default = 2560
        huge: Infinity
      },
      html5: {
        nativeTextTracks: false,
        nativeControlsForTouch: false,
        nativeAudioTracks: false,
        nativeVideoTracks: false,
      },
      inactivityTimeout: 1000,
      controlBar: {
        // children in flex order
        children: [
          {
            name: 'volumePanel',
            inline: true // Horizontal
          },
          'customControlSpacer',
          'playbackRateMenuButton',
          'chaptersButton',
          'descriptionsButton',
          'subtitlesButton',
          'captionsButton',
          'subsCapsButton',
          'audioTrackButton',
          'pictureInPictureToggle',
          'fullscreenToggle',
          'neueWrap', // Custom flexwrap component
          'playToggle',
          'currentTimeDisplay',
          'timeDivider',
          'durationDisplay',
          'progressControl',
          'liveDisplay',
          'seekToLive',
          {
            name: 'remainingTimeDisplay',
            displayNegative: false 
          },
        ],
      },
    });

    player.ready(() => {
    
      /* Show big play button when paused and time controls,
      * cf. https://github.com/videojs/video.js/pull/8833
      */
      player.addClass(
        'vjs-normalise-time-controls',
        'vjs-show-big-play-button-on-pause'
      );
      player.createModal(
        'Lorem ipsum dolor sit amet, sea tantas vituperatoribus cu, choro corrumpit no mea. Qui ex omnes timeam quaestio, diam adversarium mel eu, probatus rationibus est eu. Error commune necessitatibus ei pri. Te per sumo oratio, ocurreret dignissim disputationi at mea. Nec ei epicurei oportere disputando, nam prompta diceret in, cu maiorum constituam cum.'
      );

      // Start spatial navigation e.g. pointer devices
      player.spatialNavigation.start();

      // Pad time with leading zeros
      const currentTimeDisplay = player.controlBar.currentTimeDisplay
      const remainingTimeDisplay = player.controlBar.remainingTimeDisplay

      const updateTimeDisplays = () => {
        currentTimeDisplay.el().innerText = formatTimeWithLeadingZeros(
          player.currentTime()
        )
        remainingTimeDisplay.el().innerText = formatTimeWithLeadingZeros(
          Math.abs(player.remainingTime())
        )
      }

      // Update time displays on relevant events
      player.on('timeupdate', updateTimeDisplays)
      player.on('durationchange', updateTimeDisplays)

      // Initialize displays
      updateTimeDisplays()

      // Remove browser tooltips 
      player
        .el()
        .querySelectorAll('[title]')
        .forEach(el => {
          el.setAttribute('title', '');
        });
    });
    
    // player.createModal('foo');
    console.log(player.language());
  </script>
</body>
</html>
